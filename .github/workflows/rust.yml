name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-fw:
    runs-on: ubuntu-latest
    defaults:
     run:
      working-directory: rlfw
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: thumbv6m-none-eabi
          override: true
          components: llvm-tools-preview
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-binutils
          version: latest
          use-tool-cache: true
      - uses: actions-rs/install@v0.1
        with:
          crate: uf2conv
          version: latest
          use-tool-cache: true

      - name: Build firmware
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --manifest-path=rlfw/Cargo.toml --target=thumbv6m-none-eabi  --release
 
      - name: Generate .bin file
        run: objcopy rlfw/target/thumbv6m-none-eabi/release/rlfw -I elf32-little -O binary rlfw-$GITHUB_REF_SLUG.bin

      - name: Generate u2f file
        run: uf2conv rlfw-$GITHUB_REF_SLUG.bin --base 0x2000 --output rlfw-$GITHUB_REF_SLUG.uf2
     
      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v2
        with:
          name: rlfw-$GITHUB_REF_SLUG.uf2
          path: rlfw-$GITHUB_REF_SLUG.uf2
  

  build-cli:

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    defaults:
     run:
       working-directory: rlctl

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            output: rlctl
            use_cross: false
            experimental: false
          - target: armv7-unknown-linux-gnueabihf 
            os: ubuntu-latest
            output: rlctl
            use_cross: true
            experimental: false
          - target: x86_64-apple-darwin
            os: macos-latest
            output: rlctl
            use_cross: false
            experimental: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            output: rlctl.exe
            use_cross: false
            experimental: true

    steps:
    - uses: actions/checkout@v2
      
    - name: Configure toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        target:  ${{ matrix.target }}
        override: true
    
    - name: Configure cargo cache 
      uses: actions/cache@v1
      with:
        key: cargo-${{ matrix.os }}-${{ matrix.target }}
        path: ${{ env.HOME }}/.cargo"

    - name: Configure target cache
      uses: actions/cache@v1
      with:
        key: target-${{ matrix.os }}-${{ matrix.target }}
        path: ./target

    - name: Install libusb (brew)
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install libusb
    
    - name: Install libusb (apt)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: apt install -y libusb-dev

    - name: Install libusb (vcpkg)
      if: ${{ matrix.os == 'windows-latest' }}
      run: apt install -y libusb-dev
      uses: lukka/run-vcpkg@v4
      with:
        vcpkgArguments: libusb
        vcpkgTriplet: x64-windows-static-md

    - name: Build release
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.use_cross }}
        command: build
        args: --manifest-path=rlctl/Cargo.toml --target ${{ matrix.target }} --release
    
    - name: Create archives
      run: tar -cvf rlctl/target/rlcli-${{ matrix.target }}.tgz -C rlctl/target/${{ matrix.target }}/release/ ${{ matrix.output }}
      
    - name: Upload utility artifacts
      uses: actions/upload-artifact@v1
      with:
        name: rlcli-${{ matrix.target }}.tgz
        path: target/rlcli-${{ matrix.target }}.tgz

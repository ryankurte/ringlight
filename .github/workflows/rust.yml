name: Rust

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-fw:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - uses: FranzDiebold/github-env-vars-action@v1.2.1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: thumbv6m-none-eabi
          override: true
          components: llvm-tools-preview
          
      - name: Configure caching 
        uses: actions/cache@v2
        with:
          key: ubuntu-latest-thumbv6m-none-eabi
          path: |
            ${{ env.HOME }}/.cargo"
            ./target

      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-binutils
          version: latest
          use-tool-cache: true

      - uses: actions-rs/install@v0.1
        with:
          crate: uf2conv
          version: latest
          use-tool-cache: true

      - name: Build firmware
        run: |
          cd rlfw
          cargo objcopy --target=thumbv6m-none-eabi --release -- -O binary rlfw-$GITHUB_REF_NAME_SLUG.bin
          uf2conv rlfw-$GITHUB_REF_NAME_SLUG.bin --base 0x2000 --output rlfw-$GITHUB_REF_NAME_SLUG.uf2
          ls

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v2
        with:
          name: rlfw-$GITHUB_REF_NAME_SLUG.tgz
          path: |
            rlfw/*.bin
            rlfw/*.uf2
  

  build-cli:

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            output: rlctl
            use_cross: false
            experimental: false
          - target: armv7-unknown-linux-gnueabihf 
            os: ubuntu-latest
            output: rlctl
            use_cross: true
            experimental: true
          - target: x86_64-apple-darwin
            os: macos-latest
            output: rlctl
            use_cross: false
            experimental: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            output: rlctl.exe
            use_cross: false
            experimental: true

    steps:
    - uses: actions/checkout@v2
    - uses: FranzDiebold/github-env-vars-action@v1.2.1
      
    - name: Configure toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        target:  ${{ matrix.target }}
        override: true
    
    - name: Configure caching 
      uses: actions/cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}
        path: |
          ${{ env.HOME }}/.cargo"
          ./target

    - name: Install libusb (brew)
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install libusb
    
    - name: Install libusb (apt native)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu' }}
      run: sudo apt install -y libusb-1.0 libusb-dev

    - name: Install libusb (apt armv7)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'armv7-unknown-linux-gnueabihf' }}
      run: |
        sudo dpkg --add-architecture armhf
        sudo apt update -y
        sudo apt install -y libusb-1.0:armhf libusb-dev:armhf

    - name: Install libusb (vcpkg)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        vcpkg integrate install
        vcpkg install libusb:x64-windows-static
        echo "LIBUSB_DIR=$VCPKG_DIRECTORY/installed/x64-windows-static/" >> $GITHUB_ENV

    - name: Cache vcpkg
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}
        path: $VCPKG_DIRECTORY

    - name: Build release
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.use_cross }}
        command: build
        args: --manifest-path=rlctl/Cargo.toml --target ${{ matrix.target }} --release

    - name: Copy output file
      run: |
        cp rlctl/target/${{ matrix.target }}/release/${{ matrix.output }} ${{ matrix.output }}

    - name: Upload utility artifacts
      uses: actions/upload-artifact@v1
      with:
        name: rlctl-$GITHUB_REF_NAME_SLUG-${{ matrix.target }}
        path: ${{ matrix.output }}

  release:
    name: Create release
    runs-on: ubuntu-latest
    if: ${{ github.event == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    needs: [ "build-cli", "build-fw" ]
    steps:

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Release ${{ github.ref }}

      - name: Upload assets
        uses: skx/github-action-publish-binaries@release-1.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ steps.create_release.outputs.id }}
          args: 'rl*'
        

